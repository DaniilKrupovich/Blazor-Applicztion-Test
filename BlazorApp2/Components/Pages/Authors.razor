@page "/authors"
@rendermode InteractiveServer
@inject IAuthorService AuthorService;
@inject NavigationManager Navigation;
@inject IJSRuntime JSRuntime;

<PageTitle>Authors</PageTitle>

<div class="col-12">
    <h3><b>Enter the author information</b></h3>

    <ServerValidations IsVisible="@IsVisible" Result="@Result">
        @Name
    </ServerValidations>

    <EditForm Model="@author" OnValidSubmit="@SaveAuthor">
        <DataAnnotationsValidator/>
        <label class="col-2 font-weight-bold">Name:</label>
        <input @ref="nameText" class="form-control col-3" @bind-value="author.Name" placeholder="name" />
        &nbsp;<ValidationMessage For="@(() => author.Name)"/>
        <br />
        <label class="col-2 font-weight-bold">PhoneNumber:</label>
        <InputText class="form-control col-3" @bind-Value="author.PhoneNumber" placeholder="phone number" />
        &nbsp;<ValidationMessage For="@(() => author.PhoneNumber)" />
        <br />
        <label class="col-2 font-weight-bold">Email:</label>
        <InputText class="form-control col-3" @bind-Value="author.Email" placeholder="email" />
        &nbsp;<ValidationMessage For="@(() => author.Email)" />
        <br />
        <label class="col-2 font-weight-bold">City:</label>
            @* <InputSelect @bind-Value="author.Description">
            @if(Cities != null)
            {
                @foreach(var city in Cities)
                {
                    <option value="@city">@city</option>
                }
            }
        </InputSelect> *@

        <SelectCity CurrentCity="@author.Description"></SelectCity>
        @* <InputText @bind-Value="author.Description" placeholder="city" /> *@
        &nbsp;<ValidationMessage For="@(() => author.Description)" />
        <br />

        <input type="submit" value="Save" class="form-control col-1 btn btn-primary" />
        <input type="submit" value="Clear" class="form-control col-1 btn btn-primary" />
    </EditForm>
</div>

<h1>List Authors:</h1>
<table class="table">
    <thead>
        <tr>
            <th>AuthorId</th>
            <th>AuthorName</th>
            <th>PhoneNumber</th>
            <th>Email</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var author in ListAuthors)
        {
            <tr>
                <td>@author.AuthorId</td>
                <td>
                    <NavLink href=@string.Format("/author/{0}",@author.AuthorId)>
                        @author.Name
                    </NavLink>
                </td>
                <td>@author.PhoneNumber</td>
                <td>@author.Email</td>
            </tr>
        }
    </tbody>
    
</table>


@code {
    public Author author { get; set; }
    public List<Author> ListAuthors { get; set; }
    private IJSObjectReference? module;
    public ElementReference nameText;
    public string[] Cities { get; set; }
    public bool IsVisible{ get; set; }
    public string Name { get; set; }
    public bool Result { get; set; }

    protected override void OnInitialized()
    {
        author = new Author();
        ListAuthors = AuthorService.GetAuthors();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        /*if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/js/site.js");
        }
        init();*/
    }

    public async Task init()
    {
        Cities = await module.InvokeAsync<string[]>("getCities");
        StateHasChanged();
    }


    void Navigate(int id)
    {
        Navigation.NavigateTo($"/author/{id}");
    }
    public async Task SaveAuthor()
    {
        AuthorService.SaveAuthor(author);
        var name = author.Name;
        Result = true;
        Name = author.Name;
        IsVisible = true;
        author = new Author();


        //await module.InvokeVoidAsync("saveMessage",name);
        await module.InvokeVoidAsync("setFocusOnElement", nameText);
    }

    public void Refresh()
    {
        StateHasChanged();
    }
}
